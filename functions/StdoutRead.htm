<!DOCTYPE html>
<html>
<head>
  <title>Fonction StdoutRead</title>
  <meta charset="UTF-8">
  <link href="../css/default.css" rel="stylesheet">
  <link href="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/themes/smoothness/jquery-ui.min.css" rel="stylesheet">
  <link href="../css/custom.css" rel="stylesheet">
  <script src="//code.jquery.com/jquery-1.12.0.min.js">
  </script>
  <script src="//code.jquery.com/ui/1.11.4/jquery-ui.min.js">
  </script>
  <script src="../js/custom.js">
  </script>
</head>
<body>
  <h1 class="small"><span class="segments"><span lang="en">Function Reference</span><span lang="fr" style="display: none">Référence de fonction</span></span></h1>
  <hr style="height:0px">
  <h1>StdoutRead</h1>
  <p class="funcdesc"><span class="segments"><span lang="en">Reads from the STDOUT stream of a previously run child process.</span><span lang="fr" style="display: none">Lit dans le flux STDOUT d'un processus enfant lancé au préalable.</span></span><br></p>
  <p class="codeheader">StdoutRead ( process_id [, peek = False [, binary = False]] )<br></p>
  <h2><span class="segments"><span lang="en">Parameters</span><span lang="fr" style="display: none">Paramètres</span></span></h2>
  <table>
    <tbody>
      <tr>
        <td style="width:15%">process_id</td>
        <td style="width:85%"><span class="segments"><span lang="en">The process ID of a child process, as returned by a previous call to Run.</span><span lang="fr" style="display: none">L'ID du processus enfant, tel que retourné par un appel précédent à Run.</span></span></td>
      </tr>
      <tr>
        <td>peek</td>
        <td><strong><span class="segments"><span lang="en">[optional]</span><span lang="fr" style="display: none">[optionnel]</span></span></strong> <span class="segments"><span lang="en">If True the function does not remove the read characters from the stream.</span><span lang="fr" style="display: none">Si vrai, la fonction ne supprime pas les caractères lus à partir du flux.</span></span></td>
      </tr>
      <tr>
        <td>binary</td>
        <td><strong><span class="segments"><span lang="en">[optional]</span><span lang="fr" style="display: none">[optionnel]</span></span></strong> <span class="segments"><span lang="en">If True the function reads the data as binary instead of text (default is text).</span><span lang="fr" style="display: none">Si vrai, la fonction lit les données de manière binaire au lieu de texte (par défaut c'est texte).</span></span></td>
      </tr>
    </tbody>
  </table>
  <h2><span class="segments"><span lang="en">Return Value</span><span lang="fr" style="display: none">Valeur de retour</span></span></h2>
  <table class="noborder">
    <tbody>
      <tr>
        <td class="valign-top" style="width:10%"><span class="segments"><span lang="en">Success:</span><span lang="fr" style="display: none">Succès :</span></span></td>
        <td style="width:90%"><span class="segments"><span lang="en">the data read.</span><span lang="fr" style="display: none">Retourne les données lues.</span></span> <span class="segments"><span lang="en">@extended contains the number of bytes read.</span><span lang="fr" style="display: none">@extended contient le nombre d'octets lus.</span></span></td>
      </tr>
      <tr>
        <td class="valign-top"><span class="segments"><span lang="en">Failure:</span><span lang="fr" style="display: none">Échec :</span></span></td>
        <td><span class="segments"><span lang="en">sets the @error flag to non-zero if EOF is reached, STDOUT was not redirected for the process or other error.</span><span lang="fr" style="display: none">Retourne @error &lt;&gt; 0 si EOF est atteint, STDOUT n'a pas été redirigé pour le processus ou autre erreur.</span></span></td>
      </tr>
    </tbody>
  </table>
  <h2><span class="segments"><span lang="en">Remarks</span><span lang="fr" style="display: none">Remarques</span></span></h2>
  <p><span class="segments"><span lang="en"><a href="StdoutRead.htm">StdoutRead()</a> reads from the console standard output stream of a child process, which is normally used by console applications to write to the screen.</span><span lang="fr" style="display: none"><a href="StdoutRead.htm">StdoutRead()</a> lit à partir du flux de sortie standard de la console du processus enfant, qui est normalement utilisé par les applications console pour écrire sur l'écran.</span></span> <span class="segments"><span lang="en">During the call to <a href="Run.htm">Run()</a> for the child process you wish to read from the STD I/O parameter must have included the value of $STDOUT_CHILD (2) for this function to work properly (see the <a href="Run.htm">Run()</a> function).</span><span lang="fr" style="display: none">Pendant l'appel de <a href="Run.htm">Run()</a> pour le processus enfant, pour lire à partir de STD I/O, le paramètre doit avoir inclus la valeur $STDOUT_CHILD (2) pour que cette fonction travaille correctement (voir la fonction <a href="Run.htm">Run()</a>).</span></span><a href="Run.htm"></a><a href="Run.htm"></a><br>
  <span class="segments"><span lang="en"><a href="StdoutRead.htm">StdoutRead()</a> does not block, it will return immediately.</span><span lang="fr" style="display: none">La fonction <a href="StdoutRead.htm">StdoutRead()</a> ne bloque pas, elle retournera immédiatement.</span></span> <span class="segments"><span lang="en">In order to get all data, it must be called in a loop.</span><span lang="fr" style="display: none">Afin d'obtenir toutes les données, elle doit être appelée dans une boucle.</span></span><br>
  <span class="segments"><span lang="en">Peeking on the stream does not remove the data from the buffer, however, it does return the available data as normal.</span><span lang="fr" style="display: none">Une lecture sur le flux ne supprime pas les données de la mémoire tampon, cependant, elle renvoie les données disponibles comme d'habitude.</span></span><br>
  <span class="segments"><span lang="en">By default, data is returned in text format.</span><span lang="fr" style="display: none">Par défaut, les données sont retournées au format texte.</span></span> <span class="segments"><span lang="en">By using the binary option, the data will be returned in binary format.</span><span lang="fr" style="display: none">En utilisant l'option binaire, les données seront renvoyées au format binaire.</span></span><br></p>
  <h2><span class="segments"><span lang="en">Related</span><span lang="fr" style="display: none">Liens</span></span></h2>
  <p><a href="Run.htm">Run</a>, <a href="RunAs.htm">RunAs</a>, <a href="StderrRead.htm">StderrRead</a>, <a href="StdinWrite.htm">StdinWrite</a>, <a href="StdioClose.htm">StdioClose</a></p>
  <h2 class="bottom"><span class="segments"><span lang="en">Example</span><span lang="fr" style="display: none">Exemple</span></span></h2>
  <script type="text/javascript">
  function copyToClipboard(section) {
    if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) { // IE (4+) only
      if (window.clipboardData && clipboardData.setData) {
        clipboardData.setData("text", section + "\r\n");
        alert("Copied to clipboard");
      }
    }
  }
  </script>
  <div class="codeSnippetContainer">
    <div class="codeSnippetContainerTabs">
      <script type="text/javascript">
      if (document.URL.match(/^mk:@MSITStore:/i)) {
      document.write('<div class="codeSnippetContainerTab codeSnippetContainerTabSingle" dir="ltr">');
      document.write('<object id=hhctrl type="application/x-oleobject" classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"><param name="Command" value="ShortCut"><param name="Font" value="Verdana,10pt"><param name="Text" value="Text:Open this Script"><param name="Item1" value=",Examples\\HelpFile\\StdoutRead.au3,"><\/object>');
      document.write('<\/div>');
      }
      </script>
    </div>
    <div class="codeSnippetContainerCodeContainer">
      <div class="codeSnippetToolBar">
        <div class="codeSnippetToolBarText">
          <script type="text/javascript">
          if ((navigator.appName == "Microsoft Internet Explorer") && (parseInt(navigator.appVersion) >= 4)) // IE (4+) only
          document.write('<a href="#" id="copy" onclick="copyToClipboard(document.getElementById(\'copytext1\').innerText)">Copy to clipboard<\/a>');
          </script>
        </div>
      </div>
      <div class="codeSnippetContainerCode" dir="ltr" id="copytext1">
        <pre><span><a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;AutoItConstants.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;MsgBoxConstants.au3&gt;</span>
<a class="codeSnippetLink" href="../keywords/include.htm"><span class="S11">#include</span></a><span class="S0"> </span><span class="S7">&lt;Array.au3&gt;</span><span class="S0"> </span><span class="S1">; <span><span class="segments"><span lang="en">Required for _ArrayDisplay only.</span><span lang="fr" style="display: none">Requis pour _ArrayDisplay seulement.</span></span></span></span>

<span class="S1">; <span><span class="segments"><span lang="en">Recursively display a list of files in a directory.</span><span lang="fr" style="display: none">Affiche de manière récursive la liste des fichiers d'un répertoire.</span></span></span></span>
<span class="S0">Example</span><span class="S8">()</span>

<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Func</span></a><span class="S0"> Example</span><span class="S8">()</span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$sFilePath</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@ScriptDir"><span class="S6">@ScriptDir</span></a><span class="S0"> </span><span class="S1">; <span><span class="segments"><span lang="en">Search the current script directory.</span><span lang="fr" style="display: none">Recherche dans le répertoire du script en cours.</span></span></span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$sFilter</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><span class="S7">"*.*"</span><span class="S0"> </span><span class="S1">; <span><span class="segments"><span lang="en">Search for all files in the current directory.</span><span lang="fr" style="display: none">Recherche tous les fichiers dans le répertoire courant.</span></span> <span class="segments"><span lang="en">For a list of valid wildcards, search for 'Wildcards' in the Help file.</span><span lang="fr" style="display: none">Pour une liste des caractères génériques valides, recherchez 'caractères génériques' dans le fichier d'aide.</span></span></span></span>

<span class="S0">    </span><span class="S1">; <span><span class="segments"><span lang="en">If the file path isn't a directory then return from the 'Example' function.</span><span lang="fr" style="display: none">Si le chemin du fichier n'est pas un répertoire alors retourne de la fonction 'Exemple'.</span></span></span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/If.htm"><span class="S5">If</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S5">Not</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringInStr.htm"><span class="S4">StringInStr</span></a><span class="S8">(</span><a class="codeSnippetLink" href="../functions/FileGetAttrib.htm"><span class="S4">FileGetAttrib</span></a><span class="S8">(</span><span class="S9">$sFilePath</span><span class="S8">),</span><span class="S0"> </span><span class="S7">"D"</span><span class="S8">)</span><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Then</span></a>
<span class="S0">        </span><a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">Return</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/SetError.htm"><span class="S4">SetError</span></a><span class="S8">(</span><span class="S3">1</span><span class="S8">,</span><span class="S0"> </span><span class="S3">0</span><span class="S8">,</span><span class="S0"> </span><span class="S3">0</span><span class="S8">)</span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">EndIf</span></a>

<span class="S0">    </span><span class="S1">; <span><span class="segments"><span lang="en">Remove trailing backslashes and append a single trailing backslash.</span><span lang="fr" style="display: none">Enleve les antislashs arrière et ajoute une simple barre oblique inverse.</span></span></span></span>
<span class="S0">    </span><span class="S9">$sFilePath</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringRegExpReplace.htm"><span class="S4">StringRegExpReplace</span></a><span class="S8">(</span><span class="S9">$sFilePath</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"[\\/]+\z"</span><span class="S8">,</span><span class="S0"> </span><span class="S7">""</span><span class="S8">)</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><span class="S7">"\"</span>

<span class="S0">    </span><span class="S2">#cs</span>
<span class="S2">        Commandline parameters for DIR:</span>
<span class="S2">        /B - Simple output.</span>
<span class="S2">        /A-D - Search for all files, minus folders.</span>
<span class="S2">        /S - Search within subfolders.</span>
<span class="S2">    #ce</span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$iPID</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/Run.htm"><span class="S4">Run</span></a><span class="S8">(</span><a class="codeSnippetLink" href="../macros.htm#@ComSpec"><span class="S6">@ComSpec</span></a><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><span class="S7">' /C DIR "'</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><span class="S9">$sFilePath</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><span class="S9">$sFilter</span><span class="S0"> </span><span class="S8">&</span><span class="S0"> </span><span class="S7">'" /B /A-D /S'</span><span class="S8">,</span><span class="S0"> </span><span class="S9">$sFilePath</span><span class="S8">,</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@SW_HIDE"><span class="S6">@SW_HIDE</span></a><span class="S8">,</span><span class="S0"> </span><span class="S9">$STDOUT_CHILD</span><span class="S8">)</span>
<span class="S0">    </span><span class="S1">; <span><span class="segments"><span lang="en">If you want to search with files that contains unicode characters, then use the /U commandline parameter.</span><span lang="fr" style="display: none">Si vous souhaitez rechercher des fichiers contenant des caractères Unicode, alors utilisez le paramètre de ligne de commande /U.</span></span></span></span>

<span class="S0">    </span><span class="S1">; <span><span class="segments"><span lang="en">Wait until the process has closed using the PID returned by Run.</span><span lang="fr" style="display: none">Attend que le processus ait fermé en utilisant le PID renvoyé par Run.</span></span></span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../functions/ProcessWaitClose.htm"><span class="S4">ProcessWaitClose</span></a><span class="S8">(</span><span class="S9">$iPID</span><span class="S8">)</span>

<span class="S0">    </span><span class="S1">; <span><span class="segments"><span lang="en">Read the Stdout stream of the PID returned by Run.</span><span lang="fr" style="display: none">Lit le flux Stdout du PID renvoyé par Run.</span></span> <span class="segments"><span lang="en">This can also be done in a while loop.</span><span lang="fr" style="display: none">Ceci peut également être fait dans une boucle while.</span></span> <span class="segments"><span lang="en">Look at the example for StderrRead.</span><span lang="fr" style="display: none">Regardez l'exemple de StderrRead.</span></span></span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$sOutput</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StdoutRead.htm"><span class="S4">StdoutRead</span></a><span class="S8">(</span><span class="S9">$iPID</span><span class="S8">)</span>

<span class="S0">    </span><span class="S1">; <span><span class="segments"><span lang="en">Use StringSplit to split the output of StdoutRead to an array.</span><span lang="fr" style="display: none">Utilise StringSplit pour partager la sortie de StdoutRead en un tableau.</span></span> <span class="segments"><span lang="en">All carriage returns (@CRLF) are stripped and @CRLF (line feed) is used as the delimiter.</span><span lang="fr" style="display: none">Tous les retours chariot (@CRLF) sont supprimés et @CRLF (saut de ligne) est utilisé comme séparateur.</span></span></span></span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/Dim.htm"><span class="S5">Local</span></a><span class="S0"> </span><span class="S9">$aArray</span><span class="S0"> </span><a class="codeSnippetLink" href="../intro/lang_operators.htm"><span class="S8">=</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringSplit.htm"><span class="S4">StringSplit</span></a><span class="S8">(</span><a class="codeSnippetLink" href="../functions/StringTrimRight.htm"><span class="S4">StringTrimRight</span></a><span class="S8">(</span><a class="codeSnippetLink" href="../functions/StringStripCR.htm"><span class="S4">StringStripCR</span></a><span class="S8">(</span><span class="S9">$sOutput</span><span class="S8">),</span><span class="S0"> </span><a class="codeSnippetLink" href="../functions/StringLen.htm"><span class="S4">StringLen</span></a><span class="S8">(</span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S8">)),</span><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@CRLF"><span class="S6">@CRLF</span></a><span class="S8">)</span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/If.htm"><span class="S5">If</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../macros.htm#@error"><span class="S6">@error</span></a><span class="S0"> </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Then</span></a>
<span class="S0">        </span><a class="codeSnippetLink" href="../functions/MsgBox.htm"><span class="S4">MsgBox</span></a><span class="S8">(</span><span class="S9">$MB_SYSTEMMODAL</span><span class="S8">,</span><span class="S0"> </span><span class="S7">""</span><span class="S8">,</span><span class="S0"> </span><span class="S7">"It appears there was an error trying to find all the files in the current script directory."</span><span class="S8">)</span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">Else</span></a>
<span class="S0">        </span><span class="S1">; <span><span class="segments"><span lang="en">Display the results.</span><span lang="fr" style="display: none">Affiche les résultats.</span></span></span></span>
<span class="S0">        </span><a class="codeSnippetLink" href="../libfunctions/_ArrayDisplay.htm"><span class="S15">_ArrayDisplay</span></a><span class="S8">(</span><span class="S9">$aArray</span><span class="S8">)</span>
<span class="S0">    </span><a class="codeSnippetLink" href="../keywords/IfElseEndIf.htm"><span class="S5">EndIf</span></a>
<a class="codeSnippetLink" href="../keywords/Func.htm"><span class="S5">EndFunc</span></a><span class="S0">   </span><span class="S1">;==&gt;Example</span>
</span>
</pre>
      </div>
    </div>
  </div>
</body>
</html>
